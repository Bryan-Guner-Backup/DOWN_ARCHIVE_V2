// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  resumeReview: (where?: ResumeReviewWhereInput) => Promise<boolean>;
  reviewerListing: (where?: ReviewerListingWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  resumeReview: (
    where: ResumeReviewWhereUniqueInput
  ) => ResumeReviewNullablePromise;
  resumeReviews: (args?: {
    where?: ResumeReviewWhereInput;
    orderBy?: ResumeReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ResumeReview>;
  resumeReviewsConnection: (args?: {
    where?: ResumeReviewWhereInput;
    orderBy?: ResumeReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResumeReviewConnectionPromise;
  reviewerListing: (
    where: ReviewerListingWhereUniqueInput
  ) => ReviewerListingNullablePromise;
  reviewerListings: (args?: {
    where?: ReviewerListingWhereInput;
    orderBy?: ReviewerListingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ReviewerListing>;
  reviewerListingsConnection: (args?: {
    where?: ReviewerListingWhereInput;
    orderBy?: ReviewerListingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewerListingConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createResumeReview: (data: ResumeReviewCreateInput) => ResumeReviewPromise;
  updateResumeReview: (args: {
    data: ResumeReviewUpdateInput;
    where: ResumeReviewWhereUniqueInput;
  }) => ResumeReviewPromise;
  updateManyResumeReviews: (args: {
    data: ResumeReviewUpdateManyMutationInput;
    where?: ResumeReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertResumeReview: (args: {
    where: ResumeReviewWhereUniqueInput;
    create: ResumeReviewCreateInput;
    update: ResumeReviewUpdateInput;
  }) => ResumeReviewPromise;
  deleteResumeReview: (
    where: ResumeReviewWhereUniqueInput
  ) => ResumeReviewPromise;
  deleteManyResumeReviews: (
    where?: ResumeReviewWhereInput
  ) => BatchPayloadPromise;
  createReviewerListing: (
    data: ReviewerListingCreateInput
  ) => ReviewerListingPromise;
  updateReviewerListing: (args: {
    data: ReviewerListingUpdateInput;
    where: ReviewerListingWhereUniqueInput;
  }) => ReviewerListingPromise;
  updateManyReviewerListings: (args: {
    data: ReviewerListingUpdateManyMutationInput;
    where?: ReviewerListingWhereInput;
  }) => BatchPayloadPromise;
  upsertReviewerListing: (args: {
    where: ReviewerListingWhereUniqueInput;
    create: ReviewerListingCreateInput;
    update: ReviewerListingUpdateInput;
  }) => ReviewerListingPromise;
  deleteReviewerListing: (
    where: ReviewerListingWhereUniqueInput
  ) => ReviewerListingPromise;
  deleteManyReviewerListings: (
    where?: ReviewerListingWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  resumeReview: (
    where?: ResumeReviewSubscriptionWhereInput
  ) => ResumeReviewSubscriptionPayloadSubscription;
  reviewerListing: (
    where?: ReviewerListingSubscriptionWhereInput
  ) => ReviewerListingSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ResumeReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "coach_ASC"
  | "coach_DESC"
  | "seeker_ASC"
  | "seeker_DESC"
  | "isPending_ASC"
  | "isPending_DESC"
  | "isAccepted_ASC"
  | "isAccepted_DESC"
  | "isDenied_ASC"
  | "isDenied_DESC"
  | "isComplete_ASC"
  | "isComplete_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "dateAccepted_ASC"
  | "dateAccepted_DESC"
  | "dateCompleted_ASC"
  | "dateCompleted_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ReviewerListingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "coachID_ASC"
  | "coachID_DESC"
  | "price_ASC"
  | "price_DESC"
  | "position_ASC"
  | "position_DESC"
  | "industry_ASC"
  | "industry_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "company_ASC"
  | "company_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC";

export interface ReviewerListingCreateInput {
  id?: Maybe<ID_Input>;
  coachID?: Maybe<String>;
  price?: Maybe<Int>;
  position?: Maybe<String>;
  industry?: Maybe<String>;
  description: String;
  company?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface ResumeReviewUpdateInput {
  coach?: Maybe<String>;
  seeker?: Maybe<String>;
  isPending?: Maybe<Boolean>;
  isAccepted?: Maybe<Boolean>;
  isDenied?: Maybe<Boolean>;
  isComplete?: Maybe<Boolean>;
  dateAccepted?: Maybe<DateTimeInput>;
  dateCompleted?: Maybe<DateTimeInput>;
}

export type ResumeReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewerListingUpdateManyMutationInput {
  coachID?: Maybe<String>;
  price?: Maybe<Int>;
  position?: Maybe<String>;
  industry?: Maybe<String>;
  description?: Maybe<String>;
  company?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface ReviewerListingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  coachID?: Maybe<String>;
  coachID_not?: Maybe<String>;
  coachID_in?: Maybe<String[] | String>;
  coachID_not_in?: Maybe<String[] | String>;
  coachID_lt?: Maybe<String>;
  coachID_lte?: Maybe<String>;
  coachID_gt?: Maybe<String>;
  coachID_gte?: Maybe<String>;
  coachID_contains?: Maybe<String>;
  coachID_not_contains?: Maybe<String>;
  coachID_starts_with?: Maybe<String>;
  coachID_not_starts_with?: Maybe<String>;
  coachID_ends_with?: Maybe<String>;
  coachID_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  industry?: Maybe<String>;
  industry_not?: Maybe<String>;
  industry_in?: Maybe<String[] | String>;
  industry_not_in?: Maybe<String[] | String>;
  industry_lt?: Maybe<String>;
  industry_lte?: Maybe<String>;
  industry_gt?: Maybe<String>;
  industry_gte?: Maybe<String>;
  industry_contains?: Maybe<String>;
  industry_not_contains?: Maybe<String>;
  industry_starts_with?: Maybe<String>;
  industry_not_starts_with?: Maybe<String>;
  industry_ends_with?: Maybe<String>;
  industry_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  company?: Maybe<String>;
  company_not?: Maybe<String>;
  company_in?: Maybe<String[] | String>;
  company_not_in?: Maybe<String[] | String>;
  company_lt?: Maybe<String>;
  company_lte?: Maybe<String>;
  company_gt?: Maybe<String>;
  company_gte?: Maybe<String>;
  company_contains?: Maybe<String>;
  company_not_contains?: Maybe<String>;
  company_starts_with?: Maybe<String>;
  company_not_starts_with?: Maybe<String>;
  company_ends_with?: Maybe<String>;
  company_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  AND?: Maybe<ReviewerListingWhereInput[] | ReviewerListingWhereInput>;
  OR?: Maybe<ReviewerListingWhereInput[] | ReviewerListingWhereInput>;
  NOT?: Maybe<ReviewerListingWhereInput[] | ReviewerListingWhereInput>;
}

export type ReviewerListingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  coachID?: Maybe<String>;
}>;

export interface ResumeReviewCreateInput {
  id?: Maybe<ID_Input>;
  coach: String;
  seeker: String;
  isPending?: Maybe<Boolean>;
  isAccepted?: Maybe<Boolean>;
  isDenied?: Maybe<Boolean>;
  isComplete?: Maybe<Boolean>;
  dateAccepted?: Maybe<DateTimeInput>;
  dateCompleted?: Maybe<DateTimeInput>;
}

export interface ResumeReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  coach?: Maybe<String>;
  coach_not?: Maybe<String>;
  coach_in?: Maybe<String[] | String>;
  coach_not_in?: Maybe<String[] | String>;
  coach_lt?: Maybe<String>;
  coach_lte?: Maybe<String>;
  coach_gt?: Maybe<String>;
  coach_gte?: Maybe<String>;
  coach_contains?: Maybe<String>;
  coach_not_contains?: Maybe<String>;
  coach_starts_with?: Maybe<String>;
  coach_not_starts_with?: Maybe<String>;
  coach_ends_with?: Maybe<String>;
  coach_not_ends_with?: Maybe<String>;
  seeker?: Maybe<String>;
  seeker_not?: Maybe<String>;
  seeker_in?: Maybe<String[] | String>;
  seeker_not_in?: Maybe<String[] | String>;
  seeker_lt?: Maybe<String>;
  seeker_lte?: Maybe<String>;
  seeker_gt?: Maybe<String>;
  seeker_gte?: Maybe<String>;
  seeker_contains?: Maybe<String>;
  seeker_not_contains?: Maybe<String>;
  seeker_starts_with?: Maybe<String>;
  seeker_not_starts_with?: Maybe<String>;
  seeker_ends_with?: Maybe<String>;
  seeker_not_ends_with?: Maybe<String>;
  isPending?: Maybe<Boolean>;
  isPending_not?: Maybe<Boolean>;
  isAccepted?: Maybe<Boolean>;
  isAccepted_not?: Maybe<Boolean>;
  isDenied?: Maybe<Boolean>;
  isDenied_not?: Maybe<Boolean>;
  isComplete?: Maybe<Boolean>;
  isComplete_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  dateAccepted?: Maybe<DateTimeInput>;
  dateAccepted_not?: Maybe<DateTimeInput>;
  dateAccepted_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateAccepted_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateAccepted_lt?: Maybe<DateTimeInput>;
  dateAccepted_lte?: Maybe<DateTimeInput>;
  dateAccepted_gt?: Maybe<DateTimeInput>;
  dateAccepted_gte?: Maybe<DateTimeInput>;
  dateCompleted?: Maybe<DateTimeInput>;
  dateCompleted_not?: Maybe<DateTimeInput>;
  dateCompleted_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateCompleted_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateCompleted_lt?: Maybe<DateTimeInput>;
  dateCompleted_lte?: Maybe<DateTimeInput>;
  dateCompleted_gt?: Maybe<DateTimeInput>;
  dateCompleted_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ResumeReviewWhereInput[] | ResumeReviewWhereInput>;
  OR?: Maybe<ResumeReviewWhereInput[] | ResumeReviewWhereInput>;
  NOT?: Maybe<ResumeReviewWhereInput[] | ResumeReviewWhereInput>;
}

export interface ResumeReviewUpdateManyMutationInput {
  coach?: Maybe<String>;
  seeker?: Maybe<String>;
  isPending?: Maybe<Boolean>;
  isAccepted?: Maybe<Boolean>;
  isDenied?: Maybe<Boolean>;
  isComplete?: Maybe<Boolean>;
  dateAccepted?: Maybe<DateTimeInput>;
  dateCompleted?: Maybe<DateTimeInput>;
}

export interface ReviewerListingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewerListingWhereInput>;
  AND?: Maybe<
    | ReviewerListingSubscriptionWhereInput[]
    | ReviewerListingSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ReviewerListingSubscriptionWhereInput[]
    | ReviewerListingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ReviewerListingSubscriptionWhereInput[]
    | ReviewerListingSubscriptionWhereInput
  >;
}

export interface ReviewerListingUpdateInput {
  coachID?: Maybe<String>;
  price?: Maybe<Int>;
  position?: Maybe<String>;
  industry?: Maybe<String>;
  description?: Maybe<String>;
  company?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface ResumeReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResumeReviewWhereInput>;
  AND?: Maybe<
    ResumeReviewSubscriptionWhereInput[] | ResumeReviewSubscriptionWhereInput
  >;
  OR?: Maybe<
    ResumeReviewSubscriptionWhereInput[] | ResumeReviewSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ResumeReviewSubscriptionWhereInput[] | ResumeReviewSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ReviewerListingEdge {
  node: ReviewerListing;
  cursor: String;
}

export interface ReviewerListingEdgePromise
  extends Promise<ReviewerListingEdge>,
    Fragmentable {
  node: <T = ReviewerListingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewerListingEdgeSubscription
  extends Promise<AsyncIterator<ReviewerListingEdge>>,
    Fragmentable {
  node: <T = ReviewerListingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ResumeReviewConnection {
  pageInfo: PageInfo;
  edges: ResumeReviewEdge[];
}

export interface ResumeReviewConnectionPromise
  extends Promise<ResumeReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResumeReviewEdge>>() => T;
  aggregate: <T = AggregateResumeReviewPromise>() => T;
}

export interface ResumeReviewConnectionSubscription
  extends Promise<AsyncIterator<ResumeReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResumeReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResumeReviewSubscription>() => T;
}

export interface ReviewerListingPreviousValues {
  id: ID_Output;
  coachID?: String;
  price?: Int;
  position?: String;
  industry?: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  company?: String;
  isPublished: Boolean;
}

export interface ReviewerListingPreviousValuesPromise
  extends Promise<ReviewerListingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coachID: () => Promise<String>;
  price: () => Promise<Int>;
  position: () => Promise<String>;
  industry: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  company: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
}

export interface ReviewerListingPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewerListingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  coachID: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<String>>;
  industry: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  company: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
}

export interface ReviewerListingConnection {
  pageInfo: PageInfo;
  edges: ReviewerListingEdge[];
}

export interface ReviewerListingConnectionPromise
  extends Promise<ReviewerListingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewerListingEdge>>() => T;
  aggregate: <T = AggregateReviewerListingPromise>() => T;
}

export interface ReviewerListingConnectionSubscription
  extends Promise<AsyncIterator<ReviewerListingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewerListingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewerListingSubscription>() => T;
}

export interface AggregateReviewerListing {
  count: Int;
}

export interface AggregateReviewerListingPromise
  extends Promise<AggregateReviewerListing>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewerListingSubscription
  extends Promise<AsyncIterator<AggregateReviewerListing>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResumeReviewSubscriptionPayload {
  mutation: MutationType;
  node: ResumeReview;
  updatedFields: String[];
  previousValues: ResumeReviewPreviousValues;
}

export interface ResumeReviewSubscriptionPayloadPromise
  extends Promise<ResumeReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResumeReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResumeReviewPreviousValuesPromise>() => T;
}

export interface ResumeReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResumeReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResumeReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResumeReviewPreviousValuesSubscription>() => T;
}

export interface ResumeReviewPreviousValues {
  id: ID_Output;
  coach: String;
  seeker: String;
  isPending: Boolean;
  isAccepted: Boolean;
  isDenied: Boolean;
  isComplete: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  dateAccepted?: DateTimeOutput;
  dateCompleted?: DateTimeOutput;
}

export interface ResumeReviewPreviousValuesPromise
  extends Promise<ResumeReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coach: () => Promise<String>;
  seeker: () => Promise<String>;
  isPending: () => Promise<Boolean>;
  isAccepted: () => Promise<Boolean>;
  isDenied: () => Promise<Boolean>;
  isComplete: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  dateAccepted: () => Promise<DateTimeOutput>;
  dateCompleted: () => Promise<DateTimeOutput>;
}

export interface ResumeReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ResumeReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  coach: () => Promise<AsyncIterator<String>>;
  seeker: () => Promise<AsyncIterator<String>>;
  isPending: () => Promise<AsyncIterator<Boolean>>;
  isAccepted: () => Promise<AsyncIterator<Boolean>>;
  isDenied: () => Promise<AsyncIterator<Boolean>>;
  isComplete: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateAccepted: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateCompleted: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResumeReviewEdge {
  node: ResumeReview;
  cursor: String;
}

export interface ResumeReviewEdgePromise
  extends Promise<ResumeReviewEdge>,
    Fragmentable {
  node: <T = ResumeReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResumeReviewEdgeSubscription
  extends Promise<AsyncIterator<ResumeReviewEdge>>,
    Fragmentable {
  node: <T = ResumeReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReviewerListing {
  id: ID_Output;
  coachID?: String;
  price?: Int;
  position?: String;
  industry?: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  company?: String;
  isPublished: Boolean;
}

export interface ReviewerListingPromise
  extends Promise<ReviewerListing>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coachID: () => Promise<String>;
  price: () => Promise<Int>;
  position: () => Promise<String>;
  industry: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  company: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
}

export interface ReviewerListingSubscription
  extends Promise<AsyncIterator<ReviewerListing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  coachID: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<String>>;
  industry: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  company: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
}

export interface ReviewerListingNullablePromise
  extends Promise<ReviewerListing | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coachID: () => Promise<String>;
  price: () => Promise<Int>;
  position: () => Promise<String>;
  industry: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  company: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
}

export interface ResumeReview {
  id: ID_Output;
  coach: String;
  seeker: String;
  isPending: Boolean;
  isAccepted: Boolean;
  isDenied: Boolean;
  isComplete: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  dateAccepted?: DateTimeOutput;
  dateCompleted?: DateTimeOutput;
}

export interface ResumeReviewPromise
  extends Promise<ResumeReview>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coach: () => Promise<String>;
  seeker: () => Promise<String>;
  isPending: () => Promise<Boolean>;
  isAccepted: () => Promise<Boolean>;
  isDenied: () => Promise<Boolean>;
  isComplete: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  dateAccepted: () => Promise<DateTimeOutput>;
  dateCompleted: () => Promise<DateTimeOutput>;
}

export interface ResumeReviewSubscription
  extends Promise<AsyncIterator<ResumeReview>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  coach: () => Promise<AsyncIterator<String>>;
  seeker: () => Promise<AsyncIterator<String>>;
  isPending: () => Promise<AsyncIterator<Boolean>>;
  isAccepted: () => Promise<AsyncIterator<Boolean>>;
  isDenied: () => Promise<AsyncIterator<Boolean>>;
  isComplete: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateAccepted: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateCompleted: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResumeReviewNullablePromise
  extends Promise<ResumeReview | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coach: () => Promise<String>;
  seeker: () => Promise<String>;
  isPending: () => Promise<Boolean>;
  isAccepted: () => Promise<Boolean>;
  isDenied: () => Promise<Boolean>;
  isComplete: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  dateAccepted: () => Promise<DateTimeOutput>;
  dateCompleted: () => Promise<DateTimeOutput>;
}

export interface ReviewerListingSubscriptionPayload {
  mutation: MutationType;
  node: ReviewerListing;
  updatedFields: String[];
  previousValues: ReviewerListingPreviousValues;
}

export interface ReviewerListingSubscriptionPayloadPromise
  extends Promise<ReviewerListingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewerListingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewerListingPreviousValuesPromise>() => T;
}

export interface ReviewerListingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewerListingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewerListingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewerListingPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResumeReview {
  count: Int;
}

export interface AggregateResumeReviewPromise
  extends Promise<AggregateResumeReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResumeReviewSubscription
  extends Promise<AsyncIterator<AggregateResumeReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ReviewerListing",
    embedded: false
  },
  {
    name: "ResumeReview",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
