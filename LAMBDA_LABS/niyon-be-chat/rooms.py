# during demos a bug popped up with retrieving data from our room_list
# to save time we created a list of dictionaries to mock a call
# we believe the solution would be to create an SQLAlchemy class to model the room_list
# and moving the call from database_calls.py to the app itself
room_list = [
    {'id': 1, 'room': 'General'},
    {'id': 2, 'room': 'C++'},
    {'id': 3, 'room': 'React'},
    {'id': 4, 'room': 'Nodejs'},
    {'id': 5, 'room': 'Angular'},
    {'id': 6, 'room': 'Dev-Ops'},
    {'id': 7, 'room': 'Go!'},
    {'id': 8, 'room': 'Ruby'},
    {'id': 9, 'room': 'Graphql'},
    {'id': 10, 'room': 'JavaScript'},
    {'id': 11, 'room': 'JavaScript-FrontEnd'},
    {'id': 12, 'room': 'JavaScript-BackEnd'},
    {'id': 13, 'room': 'Java'},
    {'id': 14, 'room': 'Kotlin'},
    {'id': 15, 'room': 'C#'},
    {'id': 16, 'room': 'Rest-API'},
    {'id': 17, 'room': 'Swift'},
    {'id': 18, 'room': 'Ember'},
    {'id': 19, 'room': 'AWS'},
    {'id': 20, 'room': 'SQL'},
    {'id': 21, 'room': '.NET'},
    {'id': 22, 'room': 'TypeScript'},
    {'id': 23, 'room': 'Linux'},
    {'id': 24, 'room': 'HTML'},
    {'id': 25, 'room': 'Docker'},
    {'id': 26, 'room': 'PHP'},
    {'id': 27, 'room': 'Perl'},
    {'id': 28, 'room': 'Python'},
    {'id': 29, 'room': 'PowerShell'},
    {'id': 30, 'room': 'Rust'},
    {'id': 31, 'room': 'Unix'},
    {'id': 32, 'room': 'Visual-Basic'},
    {'id': 33, 'room': 'Vim'},
    {'id': 34, 'room': 'MATLAB'},
    {'id': 35, 'room': 'Functional-Programming'},
    {'id': 36, 'room': 'Object-Oriented-Programming'},
    {'id': 37, 'room': 'Interviewing'},
    {'id': 38, 'room': 'NPM'},
    {'id': 39, 'room': 'Express'},
    {'id': 40, 'room': 'Rails'},
    {'id': 41, 'room': 'Django'},
    {'id': 42, 'room': 'Vue'},
    {'id': 43, 'room': 'Graphql-Apollo'},
    {'id': 44, 'room': 'Graphql-Yoga'},
    {'id': 45, 'room': 'Spring'},
    {'id': 46, 'room': 'Laravel-Lumen'},
    {'id': 47, 'room': 'Flask'},
    {'id': 48, 'room': 'ASP.NET'},
    {'id': 49, 'room': 'Machine-Learning'},
]
